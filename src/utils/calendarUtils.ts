import {  format,  startOfMonth,  endOfMonth,  eachDayOfInterval,  startOfWeek,  endOfWeek,} from "date-fns";import { CalendarEvent, FilterType } from "../types/calendar";export const getDaysInMonth = (currentDate: Date): Date[] => {  const start = startOfWeek(startOfMonth(currentDate));  const end = endOfWeek(endOfMonth(currentDate));  return eachDayOfInterval({ start, end });};export const getEventsForDate = (  events: CalendarEvent[],  date: Date,  filter: FilterType = "all"): CalendarEvent[] => {  return events    .filter((event) => {      const matchesFilter = filter === "all" || event.type === filter;      const matchesDate = event.startTime.startsWith(        format(date, "yyyy-MM-dd")      );      return matchesFilter && matchesDate;    })    .sort((a, b) => a.startTime.localeCompare(b.startTime));};export const generateTimeSlots = (date: Date) => {  const slots = [];  let currentHour = 0;  while (currentHour < 24) {    slots.push({      time: `${String(currentHour).padStart(2, "0")}:00`,      label: `${String(currentHour).padStart(2, "0")}:00`,    });    currentHour++;  }  return slots;};export const shouldDisplayEvent = (  event: CalendarEvent,  filter: FilterType): boolean => {  return filter === "all" || event.type === filter;};export const formatHeaderDate = (date: Date, isMobile: boolean): string => {  return format(date, isMobile ? "MMM yyyy" : "MMMM yyyy");};export const getEventBackgroundColor = (eventType: string): string => {  return eventType === "appointment"    ? "calendar.lightBlue"    : "calendar.lightOrange";};export const getEventTextColor = (eventType: string): string => {  return eventType === "appointment" ? "common.white" : "text.primary";};